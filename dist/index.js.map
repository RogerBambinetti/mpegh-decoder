{"version":3,"sources":["../src/index.ts","../src/error/Errors.ts"],"sourcesContent":["import { execFile } from 'node:child_process';\r\nimport { promisify } from 'node:util';\r\nimport { PlatformNotSupported } from './error/Errors';\r\n\r\nconst execFilePromise = promisify(execFile);\r\n\r\ninterface IO {\r\n    input: string;\r\n    output: string;\r\n}\r\n\r\ninterface Options {\r\n    cicp?: string;\r\n}\r\n\r\nclass MpeghDecoder {\r\n    private static paths: { [key: string]: string } = {\r\n        'win32': '../src/mpeghdecoder/mpeghDecoder.exe'\r\n    };\r\n\r\n    static async decode(IO: IO, options?: Options): Promise<string> {\r\n        try {\r\n            if (!MpeghDecoder.paths[process.platform]) {\r\n                throw new PlatformNotSupported();\r\n            }\r\n\r\n            const args = ['-if', IO.input, '-of', IO.output];\r\n\r\n            if (options?.cicp) {\r\n                args.push('-tl');\r\n                args.push(options.cicp);\r\n            }\r\n\r\n            const { stdout } = await execFilePromise(MpeghDecoder.paths[process.platform], args);\r\n\r\n            return stdout;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async bulkDecode(IO: IO[], options?: Options): Promise<string[]> {\r\n        const promises: Promise<string>[] = IO.map(io => MpeghDecoder.decode(io, options));\r\n        return await Promise.all(promises);\r\n    }\r\n}\r\n\r\nmodule.exports = MpeghDecoder;","export class PlatformNotSupported extends Error {\r\n    constructor() {\r\n        super('Platform not supported');\r\n    }\r\n}\r\n\r\nexport class InvalidOption extends Error {\r\n    constructor() {\r\n        super('Invalid option');\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,gCAAyB;AACzB,uBAA0B;;;ACDnB,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C,cAAc;AACV,UAAM,wBAAwB;AAAA,EAClC;AACJ;;;ADAA,IAAM,sBAAkB,4BAAU,kCAAQ;AAW1C,IAAM,gBAAN,MAAM,cAAa;AAAA,EAKf,OAAa,OAAO,IAAQ,SAAoC;AAAA;AAC5D,UAAI;AACA,YAAI,CAAC,cAAa,MAAM,QAAQ,QAAQ,GAAG;AACvC,gBAAM,IAAI,qBAAqB;AAAA,QACnC;AAEA,cAAM,OAAO,CAAC,OAAO,GAAG,OAAO,OAAO,GAAG,MAAM;AAE/C,YAAI,mCAAS,MAAM;AACf,eAAK,KAAK,KAAK;AACf,eAAK,KAAK,QAAQ,IAAI;AAAA,QAC1B;AAEA,cAAM,EAAE,OAAO,IAAI,MAAM,gBAAgB,cAAa,MAAM,QAAQ,QAAQ,GAAG,IAAI;AAEnF,eAAO;AAAA,MACX,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA,EAEA,OAAa,WAAW,IAAU,SAAsC;AAAA;AACpE,YAAM,WAA8B,GAAG,IAAI,QAAM,cAAa,OAAO,IAAI,OAAO,CAAC;AACjF,aAAO,MAAM,QAAQ,IAAI,QAAQ;AAAA,IACrC;AAAA;AACJ;AA9BM,cACa,QAAmC;AAAA,EAC9C,SAAS;AACb;AAHJ,IAAM,eAAN;AAgCA,OAAO,UAAU;","names":[]}