{"version":3,"sources":["../src/index.ts","../src/error/Errors.ts"],"sourcesContent":["import path from 'node:path';\r\nimport { execFile } from 'node:child_process';\r\nimport { promisify } from 'node:util';\r\nimport callsites from 'callsites';\r\nimport { InvalidInput, InvalidOutput, PlatformNotSupported } from './error/Errors';\r\n\r\nconst execFilePromise = promisify(execFile);\r\n\r\ninterface IO {\r\n    input: string;\r\n    output?: string;\r\n}\r\n\r\ninterface Options {\r\n    cicp?: string;\r\n}\r\n\r\nconst paths: { [key: string]: string } = {\r\n    'win32': '../src/mpegh-decoder/mpeghDecoder.exe'\r\n};\r\n\r\nfunction validateIO(IO: IO) {\r\n    if (!paths[process.platform]) {\r\n        throw new PlatformNotSupported();\r\n    }\r\n\r\n    if (!path.extname(IO.input)) {\r\n        throw new InvalidInput();\r\n    }\r\n\r\n    IO.output = IO.output || IO.input.replace(path.extname(IO.input), '.wav');\r\n\r\n    if (!IO.output.endsWith('.wav')) {\r\n        throw new InvalidOutput();\r\n    }\r\n}\r\n\r\nconst mpeghDecoder = {\r\n    decode: async function (IO: IO, options?: Options) {\r\n        try {\r\n            validateIO(IO);\r\n\r\n            const args = ['-if', IO.input, '-of', IO.output as string];\r\n\r\n            if (options?.cicp) {\r\n                args.push('-tl');\r\n                args.push(options.cicp);\r\n            }\r\n\r\n            await execFilePromise(path.resolve(__dirname, paths[process.platform]), args);\r\n\r\n            const parentDirname = path.dirname(callsites()[0].getFileName() as string);\r\n\r\n            return path.resolve(parentDirname, IO.output as string);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n    bulkDecode: async function (IO: IO[], options?: Options): Promise<string[]> {\r\n        const promises: Promise<string>[] = IO.map(io => mpeghDecoder.decode(io, options));\r\n        return await Promise.all(promises);\r\n    }\r\n};\r\n\r\nmodule.exports = mpeghDecoder;","export class PlatformNotSupported extends Error {\r\n    constructor() {\r\n        super('Platform not supported');\r\n    }\r\n}\r\n\r\nexport class InvalidInput extends Error {\r\n    constructor() {\r\n        super('Invalid input path');\r\n    }\r\n}\r\n\r\nexport class InvalidOutput extends Error {\r\n    constructor() {\r\n        super('Invalid output path');\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAiB;AACjB,gCAAyB;AACzB,uBAA0B;AAC1B,uBAAsB;;;ACHf,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C,cAAc;AACV,UAAM,wBAAwB;AAAA,EAClC;AACJ;AAEO,IAAM,eAAN,cAA2B,MAAM;AAAA,EACpC,cAAc;AACV,UAAM,oBAAoB;AAAA,EAC9B;AACJ;AAEO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EACrC,cAAc;AACV,UAAM,qBAAqB;AAAA,EAC/B;AACJ;;;ADVA,IAAM,sBAAkB,4BAAU,kCAAQ;AAW1C,IAAM,QAAmC;AAAA,EACrC,SAAS;AACb;AAEA,SAAS,WAAW,IAAQ;AACxB,MAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC1B,UAAM,IAAI,qBAAqB;AAAA,EACnC;AAEA,MAAI,CAAC,iBAAAA,QAAK,QAAQ,GAAG,KAAK,GAAG;AACzB,UAAM,IAAI,aAAa;AAAA,EAC3B;AAEA,KAAG,SAAS,GAAG,UAAU,GAAG,MAAM,QAAQ,iBAAAA,QAAK,QAAQ,GAAG,KAAK,GAAG,MAAM;AAExE,MAAI,CAAC,GAAG,OAAO,SAAS,MAAM,GAAG;AAC7B,UAAM,IAAI,cAAc;AAAA,EAC5B;AACJ;AAEA,IAAM,eAAe;AAAA,EACjB,QAAQ,SAAgB,IAAQ,SAAmB;AAAA;AAC/C,UAAI;AACA,mBAAW,EAAE;AAEb,cAAM,OAAO,CAAC,OAAO,GAAG,OAAO,OAAO,GAAG,MAAgB;AAEzD,YAAI,mCAAS,MAAM;AACf,eAAK,KAAK,KAAK;AACf,eAAK,KAAK,QAAQ,IAAI;AAAA,QAC1B;AAEA,cAAM,gBAAgB,iBAAAA,QAAK,QAAQ,WAAW,MAAM,QAAQ,QAAQ,CAAC,GAAG,IAAI;AAE5E,cAAM,gBAAgB,iBAAAA,QAAK,YAAQ,iBAAAC,SAAU,EAAE,CAAC,EAAE,YAAY,CAAW;AAEzE,eAAO,iBAAAD,QAAK,QAAQ,eAAe,GAAG,MAAgB;AAAA,MAC1D,SAAS,OAAO;AACZ,cAAM;AAAA,MACV;AAAA,IACJ;AAAA;AAAA,EACA,YAAY,SAAgB,IAAU,SAAsC;AAAA;AACxE,YAAM,WAA8B,GAAG,IAAI,QAAM,aAAa,OAAO,IAAI,OAAO,CAAC;AACjF,aAAO,MAAM,QAAQ,IAAI,QAAQ;AAAA,IACrC;AAAA;AACJ;AAEA,OAAO,UAAU;","names":["path","callsites"]}