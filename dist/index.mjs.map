{"version":3,"sources":["../src/error/Errors.ts","../src/index.ts"],"sourcesContent":["export class PlatformNotSupported extends Error {\r\n    constructor() {\r\n        super('Platform not supported');\r\n    }\r\n}\r\n\r\nexport class InvalidOption extends Error {\r\n    constructor() {\r\n        super('Invalid option');\r\n    }\r\n}","import { execFile } from 'node:child_process';\r\nimport { promisify } from 'node:util';\r\nimport { PlatformNotSupported } from './error/Errors';\r\n\r\nconst execFilePromise = promisify(execFile);\r\n\r\ninterface IO {\r\n    input: string;\r\n    output: string;\r\n}\r\n\r\ninterface Options {\r\n    cicp?: string;\r\n}\r\n\r\nconst paths: { [key: string]: string } = {\r\n    'win32': '../src/mpeghdecoder/mpeghDecoder.exe'\r\n};\r\n\r\nconst mpeghDecoder = {\r\n    decode: async function (IO: IO, options?: Options) {\r\n        try {\r\n            if (!paths[process.platform]) {\r\n                throw new PlatformNotSupported();\r\n            }\r\n\r\n            const args = ['-if', IO.input, '-of', IO.output];\r\n\r\n            if (options?.cicp) {\r\n                args.push('-tl');\r\n                args.push(options.cicp);\r\n            }\r\n\r\n            const { stdout } = await execFilePromise(paths[process.platform], args);\r\n\r\n            return stdout;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n    bulkDecode: async function (IO: IO[], options?: Options): Promise<string[]> {\r\n        const promises: Promise<string>[] = IO.map(io => mpeghDecoder.decode(io, options));\r\n        return await Promise.all(promises);\r\n    }\r\n};\r\n\r\nmodule.exports = mpeghDecoder;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,uBAAN,cAAmC,MAAM;AAAA,MAC5C,cAAc;AACV,cAAM,wBAAwB;AAAA,MAClC;AAAA,IACJ;AAAA;AAAA;;;ACJA,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAD1B;AAAA;AAEA;AAEA,QAAM,kBAAkB,UAAU,QAAQ;AAW1C,QAAM,QAAmC;AAAA,MACrC,SAAS;AAAA,IACb;AAEA,QAAM,eAAe;AAAA,MACjB,QAAQ,SAAgB,IAAQ,SAAmB;AAAA;AAC/C,cAAI;AACA,gBAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC1B,oBAAM,IAAI,qBAAqB;AAAA,YACnC;AAEA,kBAAM,OAAO,CAAC,OAAO,GAAG,OAAO,OAAO,GAAG,MAAM;AAE/C,gBAAI,mCAAS,MAAM;AACf,mBAAK,KAAK,KAAK;AACf,mBAAK,KAAK,QAAQ,IAAI;AAAA,YAC1B;AAEA,kBAAM,EAAE,OAAO,IAAI,MAAM,gBAAgB,MAAM,QAAQ,QAAQ,GAAG,IAAI;AAEtE,mBAAO;AAAA,UACX,SAAS,OAAO;AACZ,kBAAM;AAAA,UACV;AAAA,QACJ;AAAA;AAAA,MACA,YAAY,SAAgB,IAAU,SAAsC;AAAA;AACxE,gBAAM,WAA8B,GAAG,IAAI,QAAM,aAAa,OAAO,IAAI,OAAO,CAAC;AACjF,iBAAO,MAAM,QAAQ,IAAI,QAAQ;AAAA,QACrC;AAAA;AAAA,IACJ;AAEA,WAAO,UAAU;AAAA;AAAA;","names":[]}