{"version":3,"sources":["../src/index.ts","../src/error/Errors.ts"],"sourcesContent":["import path from 'node:path';\r\nimport { execFile } from 'node:child_process';\r\nimport { promisify } from 'node:util';\r\nimport { InvalidInput, InvalidOutput, PlatformNotSupported } from './error/Errors';\r\n\r\nconst execFilePromise = promisify(execFile);\r\n\r\ninterface IO {\r\n    input: string;\r\n    output?: string;\r\n}\r\n\r\ninterface Options {\r\n    cicp?: string;\r\n}\r\n\r\ninterface DecodeResponse {\r\n    outputFilePath: string;\r\n    stdout: string;\r\n}\r\n\r\nconst paths: { [key: string]: string } = {\r\n    'win32': '../src/mpegh-decoder/mpeghDecoder.exe'\r\n};\r\n\r\nfunction validateIO(IO: IO) {\r\n    if (!paths[process.platform]) {\r\n        throw new PlatformNotSupported();\r\n    }\r\n\r\n    if (!path.extname(IO.input)) {\r\n        throw new InvalidInput();\r\n    }\r\n\r\n    IO.output = IO.output || IO.input.replace(path.extname(IO.input), '.wav');\r\n\r\n    if (!IO.output.endsWith('.wav')) {\r\n        throw new InvalidOutput();\r\n    }\r\n}\r\n\r\nexport async function decode(IO: IO, options?: Options): Promise<DecodeResponse> {\r\n    try {\r\n        validateIO(IO);\r\n\r\n        const args = ['-if', IO.input, '-of', IO.output as string];\r\n\r\n        if (options?.cicp) {\r\n            args.push('-tl');\r\n            args.push(options.cicp);\r\n        }\r\n\r\n        const { stdout } = await execFilePromise(path.resolve(__dirname, paths[process.platform]), args);\r\n\r\n        return {\r\n            outputFilePath: path.resolve(__dirname, IO.output as string),\r\n            stdout\r\n        };\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function bulkDecode(IO: IO[], options?: Options) {\r\n    const promises: Promise<DecodeResponse>[] = IO.map(io => decode(io, options));\r\n    return await Promise.all(promises);\r\n}","export class PlatformNotSupported extends Error {\r\n    constructor() {\r\n        super('Platform not supported');\r\n    }\r\n}\r\n\r\nexport class InvalidInput extends Error {\r\n    constructor() {\r\n        super('Invalid input path');\r\n    }\r\n}\r\n\r\nexport class InvalidOutput extends Error {\r\n    constructor() {\r\n        super('Invalid output path');\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,UAAU;AACjB,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;;;ACFnB,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C,cAAc;AACV,UAAM,wBAAwB;AAAA,EAClC;AACJ;AAEO,IAAM,eAAN,cAA2B,MAAM;AAAA,EACpC,cAAc;AACV,UAAM,oBAAoB;AAAA,EAC9B;AACJ;AAEO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EACrC,cAAc;AACV,UAAM,qBAAqB;AAAA,EAC/B;AACJ;;;ADXA,IAAM,kBAAkB,UAAU,QAAQ;AAgB1C,IAAM,QAAmC;AAAA,EACrC,SAAS;AACb;AAEA,SAAS,WAAW,IAAQ;AACxB,MAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC1B,UAAM,IAAI,qBAAqB;AAAA,EACnC;AAEA,MAAI,CAAC,KAAK,QAAQ,GAAG,KAAK,GAAG;AACzB,UAAM,IAAI,aAAa;AAAA,EAC3B;AAEA,KAAG,SAAS,GAAG,UAAU,GAAG,MAAM,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,MAAM;AAExE,MAAI,CAAC,GAAG,OAAO,SAAS,MAAM,GAAG;AAC7B,UAAM,IAAI,cAAc;AAAA,EAC5B;AACJ;AAEA,SAAsB,OAAO,IAAQ,SAA4C;AAAA;AAC7E,QAAI;AACA,iBAAW,EAAE;AAEb,YAAM,OAAO,CAAC,OAAO,GAAG,OAAO,OAAO,GAAG,MAAgB;AAEzD,UAAI,mCAAS,MAAM;AACf,aAAK,KAAK,KAAK;AACf,aAAK,KAAK,QAAQ,IAAI;AAAA,MAC1B;AAEA,YAAM,EAAE,OAAO,IAAI,MAAM,gBAAgB,KAAK,QAAQ,WAAW,MAAM,QAAQ,QAAQ,CAAC,GAAG,IAAI;AAE/F,aAAO;AAAA,QACH,gBAAgB,KAAK,QAAQ,WAAW,GAAG,MAAgB;AAAA,QAC3D;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAEA,SAAsB,WAAW,IAAU,SAAmB;AAAA;AAC1D,UAAM,WAAsC,GAAG,IAAI,QAAM,OAAO,IAAI,OAAO,CAAC;AAC5E,WAAO,MAAM,QAAQ,IAAI,QAAQ;AAAA,EACrC;AAAA;","names":[]}